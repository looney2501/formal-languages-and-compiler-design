%{
#include <stdio.h>
#include <math.h>
#include <string.h>
#include "atoms-table.c"
#include "fip-table.c"

int isError = 0;

%}

%option noyywrap
%option yylineno

delimiter       ([;<>!+\-*/%=(){}\.]|<<|>>|<=|>=|==|!=)
keyword         (#include|iostream|using|namespace|std|main|return|typedef|struct|int|double|if|while|cin|cout|endl)
identifier      (([_a-zA-Z])([_a-zA-Z0-9]){0,7})
number_dec      (([+\-]?([1-9]?[0-9]*[lL]?)(\.[0-9]+)?)[fF]?)
number_hex      ((0[xX][0-9a-fA-F]+)[lL]?)
number_oct      ([+-]?(0[1-7]*[lL]?))
number_bin      (0[bB][01]+)
constant        {number_dec}|{number_hex}|{number_bin}|{number_oct}
white_space     [ \t\r\n]+

%%

{white_space}
{delimiter}|{keyword}       {
                                fipTableAdd(yytext);
                            }
{identifier}                {
                                idTableAdd(yytext);
                                fipTableAddId(yytext);
                            }
{constant}                  {
                                constTableAdd(yytext);
                                fipTableAddConst(yytext);
                            }
.                           {
                                isError = 1;
                                printf("Lexical error on line: %d\n", yylineno);
                            }

%%

int main(int argc, char **argv) {
    yylex();

    if (!isError) {
        idTableUpdateOrder();
        FILE *fptrIdTable;
        fptrIdTable = fopen("resources\\identifiers-table.csv", "w");
        idTableFilePrint(fptrIdTable);
        fclose(fptrIdTable);

        constTableUpdateOrder();
        FILE *fptrConstTable;
        fptrConstTable = fopen("resources\\constants-table.csv", "w");
        constTableFilePrint(fptrConstTable);
        fclose(fptrConstTable);

        updateSymbolCodes();
        FILE *fptrFip;
        fptrFip = fopen("resources\\fip-table.csv", "w");
        fprintf(fptrFip, "ATOM,CODATOM,CODTS\n");
        for (int i = 0; i < fipTableLen; i++) {
            if (fipTable[i].symbolCode == -1) {
                fprintf(fptrFip, "%s,%d,null\n", fipTable[i].atom, fipTable[i].atomCode);
            } else {
                fprintf(fptrFip, "%s,%d,%d\n", fipTable[i].atom, fipTable[i].atomCode, fipTable[i].symbolCode);
            }
        }
        fclose(fptrFip);
    }

    return 0;
}
