%{
#include <stdio.h>
#include "syntactic-analyser.tab.h"
%}

%option noyywrap
%option yylineno

data_type       (int|double)
open_cond       (\()
close_cond      (\))
open_block      (\{)
close_block     (\})
instr_delim     (;)
assign_op       (=)
arith_op        ([+\-*/%])
logical_op      ([<>]|!=|==|<=|>=)
left_shift      (<<)
right_shift     (>>)
identifier      (([_a-zA-Z])([_a-zA-Z0-9]){0,7})
number_dec      (([+\-]?([1-9]?[0-9]*[lL]?)(\.[0-9]+)?)[fF]?)
number_hex      ((0[xX][0-9a-fA-F]+)[lL]?)
number_oct      ([+-]?(0[1-7]*[lL]?))
number_bin      (0[bB][01]+)
constant        {number_dec}|{number_hex}|{number_bin}|{number_oct}
white_space     [ \t\r\n]+

%%
{white_space}
(#include)                  {
                                return INCLUDE;
                            }
(<iostream>)                {
                                return IOSTREAM;
                            }
using                       {
                                return USING;
                            }
namespace                   {
                                return NAMESPACE;
                            }
std                         {
                                return STD;
                            }
main                        {
                                return MAIN;
                            }
return                      {
                                return RETURN;
                            }
typedef                     {
                                return TYPEDEF;
                            }
struct                      {
                                return STRUCT;
                            }
if                          {
                                return IF;
                            }
while                       {
                                return WHILE;
                            }
do                          {
                                return DO;
                            }
cin                         {
                                return CIN;
                            }
cout                        {
                                return COUT;
                            }
endl                        {
                                return ENDL;
                            }
try                         {
                                return TRY;
                            }
catch                       {
                                return CATCH;
                            }
throw                       {
                                return THROW;
                            }
{open_cond}                 {
                                return OPEN_COND;
                            }
{close_cond}                {
                                return CLOSE_COND;
                            }
{open_block}                {
                                return OPEN_BLOCK;
                            }
{close_block}               {
                                return CLOSE_BLOCK;
                            }
{instr_delim}               {
                                return INSTR_DELIM;
                            }
{assign_op}                  {
                                return ASSIGN_OP;
                            }
{arith_op}                  {
                                return ARITH_OP;
                            }
{logical_op}                {
                                return LOGICAL_OP;
                            }
{left_shift}                {
                                return LEFT_SHIFT;
                            }
{right_shift}               {
                                return RIGHT_SHIFT;
                            }
{data_type}                 {
                                return DATA_TYPE;
                            }
{identifier}                {
                                return ID;
                            }
{constant}                  {
                                return CONST;
                            }
.                           {
                                yyerror("lexycal error");
                                exit(-1);
                            }
%%

void yyerror(char *s)
{
    fprintf(stderr, "error: %s:%d\n", s, yylineno);
}
